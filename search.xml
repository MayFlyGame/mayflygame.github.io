<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo多终端多Git账号配置</title>
    <url>/2022/03/13/Hexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%A4%9AGit%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Hexo多终端多Git账号配置"><a href="#Hexo多终端多Git账号配置" class="headerlink" title="Hexo多终端多Git账号配置"></a>Hexo多终端多Git账号配置</h1><h1 id="1-Hexo多终端方案"><a href="#1-Hexo多终端方案" class="headerlink" title="1. Hexo多终端方案"></a>1. Hexo多终端方案</h1><h2 id="1-1-解决思路"><a href="#1-1-解决思路" class="headerlink" title="1.1 解决思路"></a>1.1 解决思路</h2><p>本质的思路就是在对应的Repository下（例如我的是：<a class="link"   href="http://mayflygame.github.io/" >mayflygame.github.io<i class="fas fa-external-link-alt"></i></a>）维护master和一个branch（branch的名字可以命名为hexo）</p>
<ul>
<li>主干：master，用于存放hexo生成的所有静态页面，即你要展示的网站页面。</li>
<li>分支：hexo（设置为default分支），存放的就是hexo对应的所有文件，例如_config.yml，package.json等文件，source, themes, scaffolds等文件夹。</li>
</ul>
<h2 id="1-2-如何使用？"><a href="#1-2-如何使用？" class="headerlink" title="1.2 如何使用？"></a>1.2 如何使用？</h2><p>使用的时候，新建markdown文件，编辑文章。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;new blog&quot;</span><br></pre></td></tr></table></figure>
<p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;...&quot;</span><br><span class="line">$ git push origin hexo #指令将改动推送到GitHub(此时当前分支应为hexo)</span><br></pre></td></tr></table></figure>
<p>最后执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g -d # 将hexo生成的静态页面发布到master上。</span><br></pre></td></tr></table></figure>
<h1 id="2-多Github账号问题"><a href="#2-多Github账号问题" class="headerlink" title="2. 多Github账号问题"></a>2. 多Github账号问题</h1><p>默认通过hexo g -d能够直接发布到对应的git仓库，但是如果电脑上配置了两个git账号。就会出现问题：</p>
<p>例如需要你输入用户名/密码，但是又回因为安全问题等报错，如下图。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August <span class="number">13</span>, <span class="number">2021.</span> Please use a personal access token instead.</span><br><span class="line">remote: Please see https:<span class="comment">//github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span></span><br><span class="line">fatal: Authentication failed <span class="keyword">for</span> <span class="string">&#x27;https://github.com/MayFlyGame/mayflygame.github.io/&#x27;</span></span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: <span class="built_in">Error</span>: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (<span class="regexp">/Users/g</span>odwit/Blog/mayflygame.github.io/node_modules/hexo-util/lib/spawn.js:<span class="number">51</span>:<span class="number">21</span>)</span><br><span class="line">      at ChildProcess.emit (node:events:<span class="number">520</span>:<span class="number">28</span>)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:<span class="number">291</span>:<span class="number">12</span>) &#123;</span><br><span class="line">    code: <span class="number">128</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>
<p>可以考虑通过设置token来解决。</p>
<p>这里提供个简单的解决方案，hexo的_config.yml文件，在配置repo的时候，参考如下配置</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">103 # Deployment</span><br><span class="line">104 ## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line"><span class="number">105</span> deploy:</span><br><span class="line"><span class="number">106</span>   type: git</span><br><span class="line">107   # repo：git@用户名.github.com:用户名/xxx.github.io.git</span><br><span class="line"><span class="number">108</span>   repo: git@mayflygame.github.com:MayFlyGame/mayflygame.github.io.git</span><br><span class="line"><span class="number">109</span>   branch: master</span><br><span class="line"><span class="number">110</span>   name: MayflyGame</span><br><span class="line"><span class="number">111</span>   email: mayflygame@foxmail.com</span><br></pre></td></tr></table></figure>
<p>以上。</p>
]]></content>
  </entry>
  <entry>
    <title>Jackson多态地反序列化Json</title>
    <url>/2022/04/26/Jackson%E5%A4%9A%E6%80%81%E5%9C%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Json/</url>
    <content><![CDATA[<h1 id="Jackson多态地反序列化Json"><a href="#Jackson多态地反序列化Json" class="headerlink" title="Jackson多态地反序列化Json"></a>Jackson多态地反序列化Json</h1><p>Java里面，我们可以使用Jackson将一个json字符串简单地反序列化为一个Java对象，但是，如何多态地进行反序列化呢？</p>
<p>可以考虑使用@JsonTypeInfo这个注解。网上有很多教程（例如：<a class="link"   href="https://zhuanlan.zhihu.com/p/96108902" >https://zhuanlan.zhihu.com/p/96108902<i class="fas fa-external-link-alt"></i></a>），可以参考。</p>
<p>比较主流地用法是，显式地或隐式地通过在类里面定义一个标志（例如下面json格式里面地的type，为cat时就解析为Cat对象；为dog时就解析为Dog对象)，然后通过@JsonTypeInfo.property来指定标志为type。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;cat&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;favoriteToy&quot;</span>: <span class="string">&quot;fish&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;dog&quot;</span> ,</span><br><span class="line">    <span class="string">&quot;breed&quot;</span>:<span class="string">&quot;Golden retriever&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，我的需求是，不通过property来区分怎么办？（也不可通过className，因为这样序列化出来的字符串会有className之类的关键字, 例如：{“animals”:[{“<strong>className</strong>“:”dog1”,”breed”:”Golden retriever”},{“<strong>className</strong>“:”cat1”,”favoriteToy”:”fish”}]}），我只想通过类的变量名来区分如何处理？</p>
<p>例如下面的类和json字符串（注意，json字符串没有type，没有classname），如果里面有favoriteToy，就解析为Cat；如果里面有breed，就解析为Dog。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lqbz;  <span class="comment">// 乱7八糟</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String favoriteToy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;animals&quot;</span>:[</span><br><span class="line">	&#123;<span class="attr">&quot;lqbz&quot;</span>:<span class="string">&quot;wtf&quot;</span>,<span class="attr">&quot;breed&quot;</span>:<span class="string">&quot;Golden retriever&quot;</span>&#125;, ## 有breed，解析为Dog</span><br><span class="line">  &#123;&quot;lqbz&quot;:&quot;wtf&quot;,&quot;favoriteToy&quot;:&quot;fish&quot;&#125;]    ## 有favoriteToy, 解析为Cat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，这个有非常多的解决方案，这里仅提供一种目前我认为比较优秀的解决方案（前提是：要使用**jackson2.12+**版本）</p>
<h2 id="解决方案，使用-JsonTypeInfo-Id-DEDUCTION（-注意：使用jackson2-12-版本），完整代码如下："><a href="#解决方案，使用-JsonTypeInfo-Id-DEDUCTION（-注意：使用jackson2-12-版本），完整代码如下：" class="headerlink" title="解决方案，使用@JsonTypeInfo.Id.DEDUCTION（!!!注意：使用jackson2.12+版本），完整代码如下："></a>解决方案，使用@JsonTypeInfo.Id.DEDUCTION（!!!注意：使用jackson2.12+版本），完整代码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  我这里本身的需求是，有些json是需要解析为Animal的(Animal可以实例化），既不是Dog，也不是Cat。</span></span><br><span class="line"><span class="comment">  所以增加defaultImpl = Animal.class一项，而且Animal没有声明为abstract。</span></span><br><span class="line"><span class="comment">  如果不需要解析为Animal，那就把defaultImpl去掉，并且加上abstract关键字</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION, defaultImpl = Animal.class)</span></span><br><span class="line"><span class="meta">@JsonSubTypes(&#123;</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(Dog.class),</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(Cat.class) &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lqbz;  <span class="comment">// 乱7八糟</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String lqbz)</span> </span>&#123;</span><br><span class="line">        setLqbz(lqbz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLqbz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lqbz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLqbz</span><span class="params">(String lqbz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lqbz = lqbz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Cat/Dog的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String favoriteToy;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String lqbz, String favoriteToy)</span> </span>&#123;</span><br><span class="line">        setLqbz(lqbz);</span><br><span class="line">        setFavoriteToy(favoriteToy);</span><br><span class="line">    &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> String <span class="title">getFavoriteToy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> favoriteToy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFavoriteToy</span><span class="params">(String favoriteToy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.favoriteToy = favoriteToy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String lqbz, String breed)</span> </span>&#123;</span><br><span class="line">        setLqbz(lqbz);</span><br><span class="line">        setBreed(breed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBreed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreed</span><span class="params">(String breed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Animal myAnn = <span class="keyword">new</span> Animal(<span class="string">&quot;ann&quot;</span>);</span><br><span class="line">        Animal myDog = <span class="keyword">new</span> Dog(<span class="string">&quot;ruffus&quot;</span>,<span class="string">&quot;english shepherd&quot;</span>);</span><br><span class="line">        Animal myCat = <span class="keyword">new</span> Cat(<span class="string">&quot;goya&quot;</span>, <span class="string">&quot;mice&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String annJson = objectMapper.writeValueAsString(myAnn);</span><br><span class="line">            System.out.println(<span class="string">&quot;annJson: &quot;</span> + annJson );  <span class="comment">// annJson: &#123;&quot;lqbz&quot;:&quot;ann&quot;&#125;</span></span><br><span class="line">            Animal deAnn = objectMapper.readValue( annJson, Animal.class );</span><br><span class="line">            System.out.println( <span class="string">&quot;Des object: &quot;</span> + deAnn );  <span class="comment">// Des object: com.grapetec.vulcan.Animal@77888435</span></span><br><span class="line">            System.out.println( <span class="string">&quot;Des class: &quot;</span> + deAnn.getClass().getSimpleName() ); <span class="comment">// Des class: Animal</span></span><br><span class="line">            System.out.println(<span class="string">&quot;***************************************&quot;</span>);</span><br><span class="line">            String dogJson = objectMapper.writeValueAsString(myDog);</span><br><span class="line">            System.out.println(<span class="string">&quot;dogJson: &quot;</span> + dogJson);  <span class="comment">// dogJson: &#123;&quot;lqbz&quot;:&quot;ruffus&quot;,&quot;breed&quot;:&quot;english shepherd&quot;&#125;</span></span><br><span class="line">            Animal deserializedDog = objectMapper.readValue(dogJson, Animal.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;Deserialized dogJson Class: &quot;</span> + deserializedDog.getClass().getSimpleName()); <span class="comment">// Deserialized dogJson Class: Dog</span></span><br><span class="line">            System.out.println(<span class="string">&quot;***************************************&quot;</span>);</span><br><span class="line">            String catJson = objectMapper.writeValueAsString(myCat);</span><br><span class="line">            System.out.println(<span class="string">&quot;catJson: &quot;</span> + catJson); <span class="comment">// catJson: &#123;&quot;lqbz&quot;:&quot;goya&quot;,&quot;favoriteToy&quot;:&quot;mice&quot;&#125;</span></span><br><span class="line">            Animal deseriliazedCat = objectMapper.readValue(catJson, Animal.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;Deserialized catJson Class: &quot;</span> + deseriliazedCat.getClass().getSimpleName()); <span class="comment">// Deserialized catJson Class: Cat</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
